FROM ubuntu:18.04
LABEL maintainer="Domino Data Lab <support@dominodatalab.com>"
LABEL "com.dominodatalab.www"="Domino Data Lab"
LABEL description="Domino Analytics Distribution"

#######################################################
#              Utilities required by Domino           #
#######################################################
ARG DEBIAN_FRONTEND=noninteractive
ENV DEBIAN_FRONTEND=noninteractive
# Create the Ubuntu User
RUN \
  groupadd -g 12574 ubuntu && \
  useradd -u 12574 -g 12574 -m -N -s /bin/bash ubuntu && \
# UPDATE, UPGRADE, and ADD repositories
  apt-get update -y && \
  apt-get -y install software-properties-common && \
  apt-get -y upgrade && \
# CONFIGURE locales
  apt-get install -y locales && \
  locale-gen en_US.UTF-8 && \
  dpkg-reconfigure locales && \
# INSTALL common things
  apt-get -y install build-essential wget sudo curl apt-utils net-tools libzmq3-dev ed git ca-certificates iputils-ping dnsutils telnet apt-transport-https vim python3-pip jq unzip && \
  apt-get install openjdk-8-jdk -y && \
  update-alternatives --config java && \
  echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> /home/ubuntu/.domino-defaults && \
  apt-get -y --no-install-recommends install libssl-dev libxml2-dev libxt-dev libssh2-1-dev libcurl4-openssl-dev libsasl2-dev && \
# AWS CLI
  curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" &&   unzip awscliv2.zip && \
  aws/install  && \
  rm -rf awscliv2.zip aws && \

# ADD SSH start script for Domino <4.x - COMMENTING OUT FOR SECURITY REASONS DOM-27573
#  apt-get install openssh-server -y && \
#  mkdir -p /scripts && \
#  printf "#!/bin/bash\\nservice ssh start\\n" > /scripts/start-ssh && \
#  chmod +x /scripts/start-ssh && \
  echo 'export PYTHONIOENCODING=utf-8' >> /home/ubuntu/.domino-defaults && \
  echo 'export LANG=en_US.UTF-8' >> /home/ubuntu/.domino-defaults && \
  echo 'export JOBLIB_TEMP_FOLDER=/tmp' >> /home/ubuntu/.domino-defaults && \
  echo 'export LC_ALL=en_US.UTF-8' >> /home/ubuntu/.domino-defaults && \
  locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

###############################################################
#                    sudo bug only 20.04                      #
###############################################################
RUN echo "Set disable_coredump false" >> /etc/sudo.conf

#######################################################
#                   Install R Base                    #
#######################################################
ENV R_BASE_VERSION 4.0.5
RUN \
    apt remove r-base* --purge && \
    apt-get install dirmngr && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
    add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/' && \
    apt-get update -y && \
    apt-get install -y r-base=${R_BASE_VERSION}-* r-base-dev=${R_BASE_VERSION}-*  && \
# Dependencies of various R packages
    apt-get install -y unixodbc-dev libgdal-dev libcairo2-dev  libxt-dev libgmp3-dev jags libgsl0-dev libx11-dev mesa-common-dev libglu1-mesa-dev libmpfr-dev libfftw3-dev libtiff5-dev libudunits2-dev libopenmpi-dev libmysqlclient-dev libgit2-dev -y && \
# Required for rJava
    export LD_LIBRARY_PATH=/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server && \
    echo "export LD_LIBRARY_PATH=/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server:\${LD_LIBRARY_PATH:-}" >> /home/ubuntu/.domino-defaults && \
    R CMD javareconf
# Install R packages required by Domino and some extras that are good to have
RUN Rscript -e "install.packages(c('devtools','usethis'))"
RUN apt-get install -y libsodium-dev libhiredis-dev libv8-dev
COPY r_packages.txt .
RUN while IFS=" " read -r package; do Rscript -e "devtools::install_version('"$package"')"; done < "r_packages.txt" && \
    rm -rf /usr/local/lib/R/site-library/XLConnect/unitTests/resources/testBug61.xlsx && \
    chown -R ubuntu:ubuntu /usr/local/lib/R/site-library
# Conflict with unixodbc so needs separate install line
RUN apt-get install -y libiodbc2-dev

###############################################################
#                 Python 3.8 and Miniconda                    #
###############################################################
# Inspiration: https://github.com/jupyter/docker-stacks/blob/master/base-notebook/Dockerfile
# https://repo.continuum.io/miniconda/
ENV CONDA_DIR /opt/conda
ENV PATH $CONDA_DIR/bin:$PATH
ENV MINICONDA_VERSION py38_4.8.3
ENV MINICONDA_MD5 d63adf39f2c220950a063e0529d4ff74
ENV PYTHON_VER 3.8
# Set environment variables so they are available in Domino runs and workspaces
RUN \
    echo 'export CONDA_DIR=/opt/conda' >> /home/ubuntu/.domino-defaults && \
    echo 'export PATH=$CONDA_DIR/bin:$PATH' >> /home/ubuntu/.domino-defaults && \
    echo 'export PATH=/home/ubuntu/.local/bin:$PATH' >> /home/ubuntu/.domino-defaults && \
# Install Python and Mini-conda
    cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
# Make all conda packages up-to-date. pip upgrade will NOT work as it will break things in a massive way
    conda update --update-all && \
# Specify the python version
    conda install python=${PYTHON_VER} && \
# Make conda folder permissioned for ubuntu user
    chown ubuntu:ubuntu -R $CONDA_DIR && \
# Use Mini-conda's pip
    ln -s $CONDA_DIR/bin/pip /usr/bin/pip && \
    ln -s $CONDA_DIR/bin/python /usr/local/bin/python && \
# Use Mini-conda's python  
    ln -s $CONDA_DIR/anaconda/bin/python /usr/local/bin/python3  && \
# Set permissions
    chown -R ubuntu:ubuntu  $CONDA_DIR && \
# Upgrade Pip
    pip install --upgrade pip && \
# Add various package dependencies and useful libraries
    apt-get update && \
    apt-get install -y --no-install-recommends \
        libhdf5-dev libyaml-dev pkg-config libfuse-dev cups libcups2-dev python-gi \
        python-gi-cairo python3-gi python3-gi-cairo gir1.2-gtk-3.0 libsmbclient-dev python-debian swig \
        curl libcurl4-openssl-dev libssl-dev pandoc libgmp-dev libmpfr-dev libmpc-dev
# Install Domino Dependencies 
# Packages used for model APIs and Apps and some extras that are useful
COPY requirements.txt .
RUN $CONDA_DIR/bin/conda install -c conda-forge uWSGI && \
    pip install -r requirements.txt
# Install packages used in Domino quick-start project
RUN pip install git+https://github.com/dominodatalab/python-domino.git
# Configure matplotlib
RUN mkdir -p /home/ubuntu/.config/matplotlib && \
    echo "backend : Cairo" > /home/ubuntu/.config/matplotlib/matplotlibrc  && \
    sed -i 's/backend      : TkAgg/backend      : Cairo/g' /opt/conda/lib/python3.8/site-packages/matplotlib/mpl-data/matplotlibrc

###############################################################
#                        Kerberos                             #
###############################################################
RUN apt-get install -y krb5-kdc krb5-admin-server

#######################################################
#  Install drivers for common data source connections #
#######################################################
#SQL 
RUN \
    apt-get update -y && apt-get install tdsodbc -y && \
    apt-get install -y --no-install-recommends libodbc1 unixodbc freetds-common freetds-dev && \
    cd /tmp && \
    wget -q ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-2.3.9.tar.gz && \
    tar -xf unixODBC-2.3.9.tar.gz && \
    cd unixODBC-2.3.9 && \
    ./configure --enable-gui=no --enable-drivers=no --enable-iconv --with-iconv-char-enc=UTF8 --with-iconv-ucode-enc=UTF16LE --libdir=/usr/lib/x86_64-linux-gnu --prefix=/usr --sysconfdir=/etc --enable-stats=no && \
    make && \
    make install && \
    ln -s /lib/x86_64-linux-gnu/libssl.so.1.0.0 /lib/x86_64-linux-gnu/libssl.so.10 && \
    ln -s /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 /lib/x86_64-linux-gnu/libcrypto.so.10 && \
    ldconfig && \
    rm -rf /tmp/*
# Oracle
# ROracle & PyOracle
RUN R --no-save -e "install.packages(c('DBI'))" && \
    mkdir -p /opt/oracle && \
    wget -q https://s3-us-west-2.amazonaws.com/domino-deployment/2016/02/22/instantclient-basic-linux.x64-12.1.0.2.0.zip -O /opt/oracle/instantclient-basic-linux.x64-12.1.0.2.0.zip && \
    wget -q https://s3-us-west-2.amazonaws.com/domino-deployment/2016/02/22/instantclient-sdk-linux.x64-12.1.0.2.0.zip -O /opt/oracle/instantclient-sdk-linux.x64-12.1.0.2.0.zip && \
    apt-get install libaio1 && \
    mkdir -p /opt/oracle/instantclient_12_1 && \
    cd /opt/oracle && \
    unzip instantclient-basic-linux.x64-12.1.0.2.0.zip && \
    unzip instantclient-sdk-linux.x64-12.1.0.2.0.zip && \
    cd /opt/oracle/instantclient_12_1 && \
    ln -s libclntsh.so.12.1 libclntsh.so && \
    ln -s libocci.so.12.1 libocci.so && \
    echo "export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_1:\${LD_LIBRARY_PATH:-}" >> /home/ubuntu/.domino-defaults && \
    echo 'export OCI_LIB=/opt/oracle/instantclient_12_1' >> /home/ubuntu/.domino-defaults && \
    echo 'export OCI_INC=/opt/oracle/instantclient_12_1/sdk/include' >> /home/ubuntu/.domino-defaults && \
    echo "export PATH=/opt/oracle/instantclient_12_1:\${PATH:-}" >> /home/ubuntu/.domino-defaults && \
    chown -R ubuntu:ubuntu /opt/oracle/instantclient_12_1 && \
    echo '/opt/oracle/instantclient_12_1' > /etc/ld.so.conf.d/oracle-instantclient.conf && \
    ldconfig -v && \
    export PATH=/opt/oracle/instantclient_12_1:${PATH:-} && \
    export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_1:${LD_LIBRARY_PATH:-} && \
    pip install cx_Oracle  && \
    cd /home/ubuntu && \
    wget -q https://cran.r-project.org/src/contrib/ROracle_1.3-1.tar.gz && \
    R CMD INSTALL --configure-args='--with-oci-inc=/opt/oracle/instantclient_12_1/sdk/include --with-oci-lib=/opt/oracle/instantclient_12_1' ROracle_1.3-1.tar.gz && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /opt/oracle/instantclient-basic-linux.x64-12.1.0.2.0.zip && \
    rm -rf /opt/oracle/instantclient-sdk-linux.x64-12.1.0.2.0.zip
# Install PostgreSQL client
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && apt-get -y -q install postgresql-13 postgresql-client-13 postgresql-contrib-13 && \
    rm -rf /var/lib/apt/lists/*

#######################################################
#                  R KERNEL IN JUPYTER                #
#######################################################
RUN R --no-save -e "install.packages(c('devtools'))" && \
    R --no-save -e 'install.packages("pbdZMQ", clean=TRUE)'
USER ubuntu
RUN R --no-save -e 'devtools::install_github("IRkernel/IRkernel"); IRkernel::installspec()'
# SBT
USER root
RUN \
    echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 && \
    apt-get update -y && \
    apt-get install sbt -y && \
# Julia
    rm -rf /usr/bin/julia && \
    cd /home/ubuntu && \
    wget -q https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.3-linux-x86_64.tar.gz && \
    tar xzf julia-1.5.3-linux-x86_64.tar.gz && \
    chown -R ubuntu:ubuntu /home/ubuntu/julia-1.5.3 && \
    ln -s /home/ubuntu/julia-1.5.3/bin/julia /usr/bin/julia && \
    rm -rf /home/ubuntu/julia-1.5.3-linux-x86_64.tar.gz && \
    rm -rf /var/lib/apt/lists/* && \
    rm -Rf /tmp/*
USER ubuntu
RUN julia -e 'using Pkg; Pkg.update(); Pkg.add("IJulia")'
USER root

#######################################################
#         Install CUDA and GPU dependencies           #
#######################################################
# Install CUDA Base
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get purge --autoremove -y curl && \
    rm -rf /var/lib/apt/lists/*
ENV CUDA_VERSION 11.0.3
ENV CUDA_PKG_VERSION 11-0=$CUDA_VERSION-1
# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN mkdir -p /usr/share/man/man1/ && \ 
    apt-get update && apt-get install -y --no-install-recommends \
        cuda-cudart-11-0=11.0.221-1 \
        cuda-compat-11-0 \
        cuda-toolkit-11-0 \
        cuda-nvtx-11-0 && \
    ln -s cuda-11.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*
# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.0 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=450,driver<451"
ENV NCCL_VERSION 2.8.3
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-11-0=11.0.3-1 \
    libnpp-11-0=11.1.0.245-1 \
    cuda-nvtx-11-0=11.0.167-1 \
    libcublas-11-0=11.2.0.252-1 \
    libnccl2=$NCCL_VERSION-1+cuda11.0 \
    && apt-mark hold libcublas-11-0 libnccl2 \ 
    && rm -rf /var/lib/apt/lists/*
# Install CUDNN###
ENV CUDNN_VERSION 8.0.4.30
LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8=$CUDNN_VERSION-1+cuda11.0 \
    libcudnn8-dev=$CUDNN_VERSION-1+cuda11.0 \
    && apt-mark hold libcudnn8 && \
    rm -rf /var/lib/apt/lists/*
RUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/libnvinfer7_7.1.3-1+cuda11.0_amd64.deb && \
    apt install ./libnvinfer7_7.1.3-1+cuda11.0_amd64.deb && \
    apt-get update
RUN apt-get update && apt-get upgrade -y && apt-get install -y curl
#######################################################
#      Installing Notebooks,Workspaces,IDEs,etc       #
#######################################################
# Add workspace install and configuration scripts
RUN \
    echo hello7 && \
    cd /tmp && \
    wget -q https://github.com/dominodatalab/workspace-configs/archive/develop.zip && \
    unzip develop.zip && \
    cp -Rf workspace-configs-develop/. /var/opt/workspaces && \
    rm -rf /var/opt/workspaces/workspace-logos && rm -rf /tmp/workspace-configs-develop && \
# RStudio
# Adding .Rprofile with Domino customizations
    mv /var/opt/workspaces/rstudio/.Rprofile /home/ubuntu/.Rprofile && \
    chown ubuntu:ubuntu /home/ubuntu/.Rprofile && \
    chmod +x /var/opt/workspaces/rstudio/install  && \
    /var/opt/workspaces/rstudio/install && \
    chown -R ubuntu /var/run/rstudio-server && \
    chown -R ubuntu /var/lib/rstudio-server && \
# Jupyter
    chmod +x /var/opt/workspaces/jupyter/install && \
    /var/opt/workspaces/jupyter/install && \
# VScode
    pip install python-language-server autopep8 flake8 pylint && \
    pip install git+git://github.com/dominodatalab/jupyter_codeserver_proxy-.git && \
    chmod +x /var/opt/workspaces/vscode/install && \
    /var/opt/workspaces/vscode/install && \
    rm -Rf /opt/code-server/lib/vscode/extensions/npm && \
# Jupyterlab
    chmod +x /var/opt/workspaces/Jupyterlab/install && \
    /var/opt/workspaces/Jupyterlab/install && \
# Jupyter server proxy
    conda install -y -c conda-forge nodejs && \
    pip install jupyter-server-proxy && \
    jupyter labextension install @jupyterlab/server-proxy && \
    chown -R ubuntu:ubuntu /home/ubuntu/ && \
    pip install --upgrade jupyterlab jupyterlab-git

#######################################################
#                     Some fixes                      #
#######################################################
RUN apt-get update && apt-get install -y curl && \
    pip install pyodbc tensorflow-gpu && \
# Provide Sudo in container
    echo "ubuntu    ALL=NOPASSWD: ALL" >> /etc/sudoers && \
# Fix some npm modules manually that ship with ALL current versions of nodejs
    npm init -y && \
    npm --depth 9999 update && npm -g --depth 9999 update && \
# DOT-PROP. One can force replace it like this.
    rm -Rf /usr/lib/node_modules/npm/node_modules/dot-prop && \
    wget -qO- https://github.com/sindresorhus/dot-prop/archive/v5.2.0.tar.gz -P /usr/lib/node_modules/npm/node_modules/dot-prop | tar zxvf - --strip-components=1 && \
# QS. qs have equal issues but for fun node-gyp installs one globally /usr/lib/nodejs/qs and one in the npm modules directory /usr/lib/node_modules/npm/node_modules/qs. Upgrading the qs modules
    rm -Rf /usr/lib/nodejs/qs /usr/lib/node_modules/npm/node_modules/qs && \
    wget -qO- https://github.com/ljharb/qs/archive/v6.9.4.tar.gz -P /usr/lib/nodejs/qs | tar zxvf - --strip-components=1 && \
    wget -qO- https://github.com/ljharb/qs/archive/v6.9.4.tar.gz -P /usr/lib/node_modules/npm/node_modules/qs | tar zxvf - --strip-components=1 && \
# FSTREAM. Some fstream fun /usr/lib/nodejs/fstream
    rm -Rf /usr/lib/nodejs/fstream && \
    wget -qO- https://github.com/npm/fstream/archive/v1.0.12.tar.gz /usr/lib/nodejs/fstream | tar zxvf - --strip-components=1 && \
# Some manual clean-ups
# Let's start with VSCode Handlebars Extension
    rm -Rf /opt/code-server/lib/vscode/extensions/handlebars && \
# Fix handlebars which does not work to update with npm but needs yarn
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list && \
    apt update && apt install -y yarn && \
    apt update && apt install -y --no-install-recommends yarn && \
    yarn add handlebars && \
    yarn upgrade --latest && \
    /opt/code-server/node_modules/yarn/bin/yarn && \
    /opt/code-server/node_modules/yarn/bin/yarn upgrade --latest && \
    yarn cache clean && \
# Fixing Elliptic which is part of Conda
#    sed -i 's/\"6.5.2"/\"6.5.3"/g' /opt/conda/share/jupyter/lab/staging/node_modules/elliptic/package.json && \
#    npm upgrade --prefix /opt/conda/share/jupyter/lab/staging/node_modules/elliptic/ && \
# Fix http-proxy module
    sed -i 's/\"1.18.0"/\"1.18.1"/g' /opt/code-server/node_modules/http-proxy/package.json && \
    npm upgrade --prefix /opt/code-server/node_modules/http-proxy/ && \
# Fix serialize-javascript
    sed -i 's/\"2.1.2"/\"4.0.0"/g' /opt/conda/share/jupyter/lab/staging/node_modules/serialize-javascript/package.json && \
    npm upgrade --prefix /opt/conda/share/jupyter/lab/staging/node_modules/serialize-javascript/

#####################################################################################################
# Upgrading Git client to address https://github.blog/2021-03-09-git-clone-vulnerability-announced/ #
#####################################################################################################
RUN add-apt-repository ppa:git-core/ppa -y && \
    apt-get update && \
    apt-get install git -y

## ############################################################
#       Install Git LFS                                      #
##############################################################
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash && \
    apt-get install git-lfs && \
    git lfs install

###############################################################
#       Add Goofys binaries to support Goofys for EDVs        #
############################################################### 
ADD https://github.com/kahing/goofys/releases/download/v0.24.0/goofys  /usr/bin/
RUN chmod a+x /usr/bin/goofys

###############################################################
#      Add SSHFS binaries to support SSHFS for EDVs           #
###############################################################
RUN apt-get update && apt-get install -y sshfs \
    &&  sed -i "s/^#user_allow_other/user_allow_other/" /etc/fuse.conf

###############################################################
#                         Clean Up                            #
###############################################################
RUN apt-get clean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -Rf /tmp/*
# Removing coursier due to security vulnerabilities
RUN rm -rf /home/ubuntu/.cache/coursier
# Removing PyYAML due to security vulnerabilities. Was not pip installed, so removing manually
RUN rm -rf /opt/conda/lib/python3.8/site-packages/PyYAML-5.3.1.dist-info /opt/conda/lib/python3.8/site-packages/PyYAML-5.3.1-py3.8.egg-info

# Bintray no longer exists as of July 4th, so adding this line to document fix for bintray related apt-get issues
RUN rm -rf /etc/apt/sources.list.d/sbt.list